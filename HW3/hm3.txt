1.

a) 15

b) 55

c) 0

d) it goes on forever or until it reaches the max size of int



2.

a) F takes a number, n, that will multiply itself to n minus one until n equals 0 then it returns 0. The with an positive n number the result will always be 0

b) F takes two numbers, x and n, x is not used and is just an extra variable. F takes n and adds it to n minus one until n equals 0, then it returns 0. It results in the sum of n and every positive integer below it.

c) F takes a number, n, and when n >= 2 it adds one to the end result and divides n by 2 until n < 2 where it returns 0. The end result is how many times n could be divided by 2 and be greater or equal to 2.

d) F takes a number, n, and as long as n != 0 it adds the digit in the ones place to the end result and divides n by 10. The end result is the sum of each individual digit eg: 123 will return 6

e) F takes a number, n, and if n is greater 10 it divides it by 10, if n less 10 but greater than or equal to 0 it returns itself, n, if n is less than 0 it returns the positive value of n. The result of this function is if it is greater than 10 it returns the most significant digit, if it is less than 10 it returns itself, if it is less than 0 it returns postive n.



3. 31 moves


4. 1,267,650,600,228,229,401,496,703,205,375 seconds or 40,196,936,841,331,475,186.983232032439 millennia


5.

a)
Move disc 1 From tower 0 to tower 1
Move disc 2 From tower 0 to tower 2
Move disc 1 From tower 1 to tower 2

b)
Move disc 1 From tower 0 to tower 1
Move disc 2 From tower 0 to tower 2
Move disc 1 From tower 1 to tower 2

c)
Move disc 1 From tower 0 to tower 1
Move disc 2 From tower 0 to tower 2
Move disc 1 From tower 1 to tower 2

d)
Move disc 1 From tower 0 to tower 1
Move disc 2 From tower 0 to tower 2
Move disc 1 From tower 1 to tower 2

e)
O(2^n)

